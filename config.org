#+TITLE: Hsin-Hao's Emacs configuration
#+AUTHOR: Hsin-Hao Yu

This is my Emacs configuration file, in literate programming style (based on [[https://blog.thomasheartman.com/posts/configuring-emacs-with-org-mode-and-literate-programming][this tutorial]]).

* Package management
** Use [[https://melpa.org/#/][MELPA]] for package archive

    #+begin_src emacs-lisp
    (package-initialize)
    (add-to-list 'package-archives
	         '("melpa" . "http://melpa.org/packages/"))
    #+end_src

** Make sure that ~use-package~ is loaded

    #+begin_src emacs-lisp
    (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
    #+end_src


* Basic UX settings
** Move custom files outside ~init.el~
Move all ~custom-*~ stuff into ~custom-file.el~. Do not put them in ~init.el~.

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom-file.el")
(load-file custom-file)
#+end_src

** General settings

    #+begin_src emacs-lisp
    (setq inhibit-startup-message t)
    (setq column-number-mode t)
    #+end_src

** Theme

#+begin_src emacs-lisp
(use-package monokai-theme
    :ensure t)
(load-theme 'monokai t)
#+end_src
    
** Enhance M-x with [[https://github.com/nonsequitur/smex][smex]]

  #+begin_src emacs-lisp
  (use-package smex
      :ensure t
      :disabled t
      :config
          (setq smex-save-file (concat user-emacs-directory ".smex-items"))
	  (smex initialize)
      :bind 
          ("M-x" . smex))
  #+end_src

** [[https://company-mode.github.io][company]] mode for completion 

  #+begin_src emacs-lisp
  (use-package company
      :config
          (setq company-idle-delay 0.3)
          (global-company-mode t))
  #+end_src

** [[https://github.com/DarwinAwardWinner/ido-completing-read-plus][ido]]: Display possible completions at all places

  #+begin_src emacs-lisp
  (use-package ido-completing-read+
      :ensure t
      :config
          ;; This enables ido in all contexts where it could be useful, not just
          ;; for selecting buffer and file names
          (ido-mode t)
          (ido-everywhere t)
          ;; This allows partial matches, e.g. "uzh" will match "Ustad Zakir Hussain"
	  (setq ido-enable-flex-matching t)
	  (setq ido-use-filename-at-point nil)
	  ;; Includes buffer names of recently opened files, even if they're not open now.
	  (setq ido-use-virtual-buffers t)
	  :diminish nil)
  #+end_src
** Replace ~list-buffer~ with [[https://www.emacswiki.org/emacs/IbufferMode#Ibuffer][ibuffer]]
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src


* Document preparation
** Markdown mode
Use [[https://jblevins.org/projects/markdown-mode/][Markdown mode]] for ~.md~ files. A ~marked~ script has to be created, so that markdown files can be viewed with Marked 2 on macOS (see [[https://leanpub.com/markdown-mode/read][this document]]).


  #+begin_src emacs-lisp
  (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown")
      :config (setq markdown-open-command "/usr/local/bin/mark")
      :hook ((markdown-mode . flyspell-mode)
             (gfm-mode . flyspell-mode)))
  #+end_src


* ~Deft~ for searching documents 
[[https://github.com/jrblevin/deft][Deft mode]] is a tool for managing notes, similar to Notational Velocity on macOS.

  #+begin_src emacs-lisp
  (use-package deft
      :ensure t
      :bind (("<f8>" . deft))
      :commands (deft)
      :config
      (setq deft-extensions '("txt" "tex" "md" "org")
            deft-directory "~/.deft"
	      deft-default-extension "org"
	      deft-recursive t
	      deft-use-filter-string-for-filename nil
	      deft-use-filename-as-title nil
	      deft-markdown-mode-title-level 1
	      deft-file-naming-rules '((noslash . "-")
                                     (nospace . "-")
				       (case-fn . downcase))))
  #+end_src


* Org mode
I use Org mode for my todos, note taking, and journaling.
** Basics
Some basic UX settings
  #+begin_src emacs-lisp
  ;; spellcheck all org documents
  (add-hook 'org-mode-hook 'flyspell-mode)

  ;; useful key bindings 
  ;; Insert link. Rather than asking for a label, use "journal entry"
  (defun hh-org-insert-link ()
     (interactive)
     (org-insert-link nil nil "Journal Entry"))

  (add-hook 'org-mode-hook
    (lambda ()
        (define-key org-mode-map (kbd "C-c a") 'org-agenda)
        (define-key org-mode-map (kbd "C-c l") 'org-store-link)
        (define-key org-mode-map (kbd "C-c jl") 'hh-org-insert-link)))

  ;; used identation to indicate the hierarchy of headings, rather than stars
  (setq org-startup-indented t)

  ;; wrap around
  (setq org-startup-truncated nil)
  #+end_src

Use bullets rather than stars
  #+begin_src emacs-lisp
  (use-package org-bullets
      :ensure t
      :init
          (setq org-bullets-bullet-list'("◉" "●" "○" "▪" "▪"))
      :config
          (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
          (setq org-ellipsis " ▾"))
  #+end_src

Display timestamps in 12 hour format. This changes how timestamps are displayed, but not how agenda time grid is displayed. For more information, see [[https://emacs.stackexchange.com/questions/19863/how-to-set-my-own-date-format-for-org][this link]].
  #+begin_src emacs-lisp
  ;; %l is hours in 12 clock
  ;; %p is AM/PM
  (setq-default org-display-custom-times t)
  (setq org-time-stamp-custom-formats '("<%a %b %e %Y>" . "<%a %b %e %Y %l:%M%p>"))
  #+end_src

** Workflow
Integration with deft: Use everything under deft to build agenda.
  #+begin_src emacs-lisp
  (setq org-agenda-files '("~/.deft"))
  #+end_src

This defines my todo workflow
  #+begin_src emacs-lisp
  (setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  #+end_src
** Agenda UX

  #+begin_src emacs-lisp
  ;; use 12 hour clock in timegrid
  (setq org-agenda-timegrid-use-ampm 1)

  ;; time grid takes too much space
  (setq org-agenda-use-time-grid nil)
  #+end_src

** Customized agenda commands
Based on [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][this article]].

  #+begin_src emacs-lisp
  (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.
       PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
           (if (= pri-value pri-current)
               subtree-end
               nil)))

  (defun air-org-skip-subtree-if-habit ()
      "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
           (if (string= (org-entry-get nil "STYLE") "habit")
               subtree-end
           nil)))

  (setq org-agenda-custom-commands
      '(("d" "Daily agenda and all TODOs"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))

          (agenda "")

	  (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks nil)))))
  #+end_src

** Org Journal
I use org mode to keep a work journal. Note that the journal files are kept under .deft.

  #+begin_src emacs-lisp
  (use-package org-journal
        :ensure t
        :custom
            (org-journal-dir "~/.deft/journal/")
            (org-journal-file-format "%Y-%m-%d.org"))
  #+end_src
    
I don't actually use these functions (stolen from [[https://blog.thomasheartman.com/posts/configuring-emacs-with-org-mode-and-literate-programming][here]]), but they should be very useful.

  #+begin_src emacs-lisp
  (defun get-journal-file-today ()
      "Return filename for today's journal entry."
      (let ((daily-name (format-time-string "%Y-%m-%d.org")))
             (expand-file-name (concat org-journal-dir daily-name))))

  (defun journal-file-today ()
      "Create and load a journal file based on today's date."
      (interactive)
      (find-file (get-journal-file-today)))
  #+end_src

** Org capture
Org capture is a system for quickly dispatching texts to different destinations. The template for journal is from [[https://blog.thomasheartman.com/posts/configuring-emacs-with-org-mode-and-literate-programming][here]].
The syntax of the template is explained in the documentation for the variable ~org-capture-templates~.

  #+begin_src emacs-lisp
  (defun org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      (org-narrow-to-subtree))

  (setq org-capture-templates
     '(("t" "TODO inbox"
	       entry
           (file "~/.deft/capture-todo.org")
           "* TODO %?
              SCHEDULED: %t")
       ("n" "notes inbox"
	       entry
           (file "~/.deft/capture-notes.org")
           "* %T\n%i%?")
	   ("j" "Journal entry"
	       plain
	       (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
	       :jump-to-captured t
	       :immediate-finish t)))
  #+end_src
** Preview
#+begin_src emacs-lisp
(use-package htmlize
    :ensure t)
#+end_src


* Programming
** Git integration with [[https://magit.vc][Magit]]
  #+begin_src emacs-lisp
  (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))
  #+end_src

** imenu for jumping to definition
  #+begin_src emacs-lisp
  (global-set-key (kbd "M-i") 'imenu)
  #+end_src 

** code snippets using [[https://github.com/joaotavora/yasnippet][yasnippet]]
  #+begin_src emacs-lisp
  (use-package yasnippet
      :ensure t
      :init (yas-global-mode 1)
      :config
          (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
  #+end_src


* Interactive functions for personal use
  #+begin_src emacs-lisp
  (defun hhyu-init ()
      (interactive)
      (find-file "~/.emacs.d/config.org"))

  (defun hhyu-cheatsheet ()
      (interactive)
      (dired "~/.emacs.d/notes"))
  #+end_src


* References
- [[https://github.com/dileban/.emacs.d][Dileban's config]]
- [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs by Mickey Petersen]]

