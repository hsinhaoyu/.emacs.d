
#+TITLE: Hsin-Hao's Emacs configuration
#+AUTHOR: Hsin-Hao Yu
#+STARTUP: overview

This is my Emacs configuration file, in literate programming style (based on [[https://blog.thomasheartman.com/posts/configuring-emacs-with-org-mode-and-literate-programming][this tutorial]]).

* Package management
** Use [[https://melpa.org/#/][MELPA]] for package archive

#+begin_src emacs-lisp
(package-initialize)
  (add-to-list 'package-archives
      '("melpa" . "http://melpa.org/packages/"))
#+end_src

** Make sure that ~use-package~ is loaded

#+begin_src emacs-lisp
(when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src
    
* Basic UX settings
** Move custom files outside ~init.el~
Move all ~custom-*~ stuff into ~custom-file.el~. Do not put them in ~init.el~.

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom-file.el")
(load-file custom-file)
#+end_src
** Debugging
#+begin_src emacs-lisp
;;(toggle-debug-on-error)
#+end_src
** General settings
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq column-number-mode t)
#+end_src
** Theme
#+begin_src emacs-lisp
  ;;(use-package monokai-theme
  ;;    :ensure t)
  ;;(load-theme 'monokai t)
  (load-theme 'one-light t)
#+end_src
** Enhance M-x with [[https://github.com/nonsequitur/smex][smex]]
  #+begin_src emacs-lisp
  (use-package smex
      :ensure t
      :disabled t
      :config
          (setq smex-save-file (concat user-emacs-directory ".smex-items"))
	  (smex initialize)
      :bind 
          ("M-x" . smex))
  #+end_src
** [[https://company-mode.github.io][company]] mode for completion 
  #+begin_src emacs-lisp
    (use-package company
        :config
            (setq company-idle-delay 0.25)
            (setq completion-ignore-case t)
            (global-company-mode t))
  #+end_src
** [[https://github.com/DarwinAwardWinner/ido-completing-read-plus][ido]]: Display possible completions at all places
  #+begin_src emacs-lisp
  (use-package ido-completing-read+
      :ensure t
      :config
          ;; This enables ido in all contexts where it could be useful, not just
          ;; for selecting buffer and file names
          (ido-mode t)
          (ido-everywhere t)
          ;; This allows partial matches, e.g. "uzh" will match "Ustad Zakir Hussain"
	  (setq ido-enable-flex-matching t)
	  (setq ido-use-filename-at-point nil)
	  ;; Includes buffer names of recently opened files, even if they're not open now.
	  (setq ido-use-virtual-buffers t)
	  :diminish nil)
  #+end_src
** Replace ~list-buffer~ with [[https://www.emacswiki.org/emacs/IbufferMode#Ibuffer][ibuffer]]
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
** Text wrapping
Turn on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][visual-line-mode]] for text and org files. This wraps words by word boundaries.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'visual-line-mode)
(add-hook 'org-mode 'visual-line-mode)
#+end_src
** GUI
Turn off the tool bar and scroll bar in windows. Note: I decided to keep the scroll bar, just to make the margin of the window more visible.
#+begin_src emacs-lisp
(tool-bar-mode -1)
(toggle-scroll-bar -1)
#+end_src
** Unix setting
In =.zshrc=, remember to export three environment variables
#+begin_src sh
export DEFT_PATH='/Users/hhyu/Documents/emacs_docs/deft_docs'
export ORG_AGENDA_PATH='/Users/hhyu/Documents/emacs_docs/deft_docs'
export ORG_JOURNAL_PATH='/Users/hhyu/Documents/emacs_docs/journal_docs'
#+end_src
** Experimental
This is supposed to be useful for accessing environment variables on macOS. Disabled because I haven't found it useful yet.
#+BEGIN_SRC
(use-package exec-path-from-shell
  :ensure t
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+END_SRC
* eLisp programming support
Load packages to make Emacs programming easier.

[[https://github.com/magnars/s.el][s.el]] is a library for string manipulation:
#+begin_src emacs-lisp
(use-package s :ensure t)
#+end_src
* Scratch buffer
The scratch buffer is a convenient place to display cheat sheets.
#+begin_src emacs-lisp
(setq initial-scratch-message 
  (concat
     "* Scratch Buffer *"
     "\n# Evaluate S-expression: C-x C-e"
     (format "\n# DEFT_PATH=%s" (getenv "DEFT_PATH"))
     (format "\n# ORG_AGENDA_PATH=%s"  (getenv "ORG_AGENDA_PATH"))
     (format "\n# ORG_JOURNAL_PATH=%s" (getenv "ORG_JOURNAL_PATH"))
  ))
#+end_src 
* Markdown mode
Use [[https://jblevins.org/projects/markdown-mode/][Markdown mode]] for ~.md~ files. A ~marked~ script has to be created, so that markdown files can be viewed with Marked 2 on macOS (see [[https://leanpub.com/markdown-mode/read][this document]]).

  #+begin_src emacs-lisp
  (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown")
      :config (setq markdown-open-command "/usr/local/bin/mark")
      :hook ((markdown-mode . flyspell-mode)
             (gfm-mode . flyspell-mode)))
  #+end_src
  
* ~Deft~ for searching documents 
[[https://github.com/jrblevin/deft][Deft mode]] is a tool for managing notes, similar to Notational Velocity on macOS.
** Basic setup
  #+begin_src emacs-lisp
  ;; if DEFT_PATH is not defined, use a default path
  (defun get_deft_path ()
    (let ((deft_path (getenv "DEFT_PATH")))
      (if deft_path deft_path "~/.deft")))

  (use-package deft
      :ensure t
      :bind (("<f8>" . deft))
      :commands (deft)
      :config
      (setq deft-extensions '("txt" "tex" "md" "org")
            deft-directory (get_deft_path)
	      deft-default-extension "org"
	      deft-recursive t
	      deft-use-filter-string-for-filename nil
	      deft-use-filename-as-title nil
	      deft-markdown-mode-title-level 1
	      deft-file-naming-rules '((noslash . "-")
                                     (nospace . "-")
				       (case-fn . downcase))))
  #+end_src
** Customized summary
  By default, the summary of each file ignores uppercase markups such as `#+AUTHOR:`. I want it to ignore lowercase ones too.

  #+begin_src emacs-lisp :noweb yes
  (setq deft-strip-summary-regexp "\\([]\\|<<RX1>>\\|<<RX2>>\\)")
  #+end_src

  This matches things like #+title: or #+TITLE:
  #+begin_src emacs-lisp :tangle no :noweb-ref RX1
  ^#\\+[[:alpha:]_]+:.*$
  #+end_src

  This matches my convention "- tags ::"
  #+begin_src emacs-lisp :tangle no :noweb-ref RX2
  ^- tags ::.*$
  #+end_src
* Org mode
I use Org mode for my todos, note taking, and journaling.
** Basics
Some basic UX settings
  #+begin_src emacs-lisp
    ;; spellcheck all org documents
    (add-hook 'org-mode-hook 'flyspell-mode)

    ;; useful key bindings 
    ;; Insert link. Rather than asking for a label, use "journal entry"
    (defun hh-org-insert-link ()
       (interactive)
       (org-insert-link nil nil "Journal Entry"))

    (add-hook 'org-mode-hook
      (lambda ()
          (define-key org-mode-map (kbd "C-c a") 'org-agenda)
          (define-key org-mode-map (kbd "C-c l") 'org-store-link)
          (define-key org-mode-map (kbd "C-c jl") 'hh-org-insert-link)))

    ;; used identation to indicate the hierarchy of headings, rather than stars
    (setq org-startup-indented t)

    ;; wrap around
    (setq org-startup-truncated nil)
  #+end_src

Use bullets rather than stars
  #+begin_src emacs-lisp
  (use-package org-bullets
      :ensure t
      :init
          (setq org-bullets-bullet-list'("◉" "●" "○" "▪" "▪"))
      :config
          (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
          (setq org-ellipsis " ▾"))
  #+end_src

Display timestamps in 12 hour format. This changes how timestamps are displayed, but not how agenda time grid is displayed. For more information, see [[https://emacs.stackexchange.com/questions/19863/how-to-set-my-own-date-format-for-org][this link]].
  #+begin_src emacs-lisp
  ;; %l is hours in 12 clock
  ;; %p is AM/PM
  (setq-default org-display-custom-times t)
  (setq org-time-stamp-custom-formats '("<%a %b %e %Y>" . "<%a %b %e %Y %l:%M%p>"))
  #+end_src
  
** Workflow
Integration with deft: Use everything under deft to build agenda.
  #+begin_src emacs-lisp
  ;; if ORG_PATH is not defined, use the default DEFT path
  (defun get_agenda_path ()
    (let ((org_agenda_path (getenv "ORG_AGENDA_PATH")))
      (if org_agenda_path org_agenda_path "~/.deft")))

  ;;(setq org-agenda-files '("~/.deft"))
  (setq org-agenda-files (list (get_agenda_path)))
  #+end_src

This defines my todo workflow
  #+begin_src emacs-lisp
  (setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
  #+end_src
** Agenda UX

  #+begin_src emacs-lisp
  ;; use 12 hour clock in timegrid
  (setq org-agenda-timegrid-use-ampm 1)

  ;; time grid takes too much space
  (setq org-agenda-use-time-grid nil)
  #+end_src

  The `org-agenda-prefix-format` variable is a way to customize how agenda is displayed. Use `C-h v` to see the template syntax. Here, I set up a noweb macro so other parts of this config file can change it.

#+begin_src emacs-lisp :noweb yes
  (setq org-agenda-prefix-format
        '(
          <<AGENDA_PREFIX>>
          )
  )
#+end_src

** Customized agenda commands
Based on [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][this article]].

  #+begin_src emacs-lisp
  (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.
       PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
           (if (= pri-value pri-current)
               subtree-end
               nil)))

  (defun air-org-skip-subtree-if-habit ()
      "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
           (if (string= (org-entry-get nil "STYLE") "habit")
               subtree-end
           nil)))

  (setq org-agenda-custom-commands
      '(("d" "Daily agenda and all TODOs"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))

          (agenda "")

	  (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks nil)))))
  #+end_src

** Org Journal
org-journal is a system for writing journals based on org. I have replaced it with org-roam's "dailies". So this section has become obsolete.

  #+begin_src emacs-lisp
    ;; if ORG_JOURNAL_PATH is not defined, use a default setting
    (defun get_org_journal_path ()
      (let ((org_journal_path (getenv "ORG_JOURNAL_PATH")))
        (if org_journal_path org_journal_path "~/.deft/journal")))


    ;;(use-package org-journal
    ;;      :ensure t
    ;;      :custom
    ;;          (org-journal-dir (get_org_journal_path))
    ;;          (org-journal-file-format "%Y-%m-%d.org"))
  #+end_src
    
I don't actually use these functions (stolen from [[https://blog.thomasheartman.com/posts/configuring-emacs-with-org-mode-and-literate-programming][here]]), but they should be very useful.

  #+begin_src emacs-lisp
  (defun get-journal-file-today ()
      "Return filename for today's journal entry."
      (let ((daily-name (format-time-string "%Y-%m-%d.org")))
             (expand-file-name (concat org-journal-dir daily-name))))

  (defun journal-file-today ()
      "Create and load a journal file based on today's date."
      (interactive)
      (find-file (get-journal-file-today)))
  #+end_src
  
** Preview
#+begin_src emacs-lisp
(use-package htmlize
    :ensure t)
#+end_src
** Org capture
Org capture is a system for quickly dispatching texts to different destinations. The template for journal is from [[https://blog.thomasheartman.com/posts/configuring-emacs-with-org-mode-and-literate-programming][here]].
The syntax of the template is explained in the documentation for the variable ~org-capture-templates~.
Since I have moved to org-roam, which has its own capture system, this section is now obsolete.

Some preliminary settings
#+begin_src emacs-lisp :noweb yes
  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    (org-narrow-to-subtree))

  (setq org-capture-templates
      '(
        <<ORG_CAPTURE>>
       )
  )
#+end_src

Capture ad hoc todos in a special file
#+begin_src emacs-lisp :tangle no :noweb-ref ORG_CAPTURE
("t" "TODO inbox"
     entry
     (file "~/.deft/capture-todo.org")
     "* TODO %?
        SCHEDULED: %t")
#+end_src

Capture ad hoc notes in a special file
#+begin_src emacs-lisp :tangle no :noweb-ref ORG_CAPTURE
("n" "notes inbox"
     entry
     (file "~/.deft/capture-notes.org")
     "* %T\n%i%?")
#+end_src

Capture org journal
#+begin_src emacs-lisp :tangle no :noweb-ref ORG_CAPTURE
("j" "Journal entry"
     plain
     (function org-journal-find-location)
     "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
     :jump-to-captured t
     :immediate-finish t)
#+end_src
* Roam
I use [[https://www.orgroam.com][org-roam]] to keep track of org files that are connected to each other. It is inspired by the cloud-based commercial product [[https://roamresearch.com][Roam]]. 
** Basic setup
I took this from [[https://github.com/org-roam/org-roam][org-roam's GitHub README]].
About completion, see this [[https://org-roam.discourse.group/t/how-to-to-get-title-of-the-target-note-working-with-inline-autocomplete-in-org-roam/782][discussion]].

Note that I use the deft directory for Roam.
#+begin_src emacs-lisp
  (use-package org-roam
      :ensure t
      :custom  (org-roam-directory (get_deft_path))
      :hook (org-mode . org-roam-mode)
      :bind (("C-c r c" . org-roam-capture)
             ("C-c r f" . org-roam-find-file)
             ("C-c r j" . org-roam-dailies-capture-today)
             ("C-c r d" . org-roam-dailies-find-today)
             :map org-roam-mode-map
                  (("C-c r l" . org-roam))
             :map org-mode-map
                  (("C-c r i" . org-roam-insert)
                   ("C-c r I" . org-roam-insert-immediate)))
  )
#+end_src
** Interaction with org-agenda
I use the setup recommended in [[https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html][this article]], to simplify how TODOs are displayed in org-agenda. To make it work, set the category of a heading with

#+begin_src
:PROPERTIES:
:CATEGORY: XXX
:END:
#+end_src

Here, we set up templates controlling how items are displayed in agenda. Note that AGENDA_PREFIX is a macro defined earlier.
#+begin_src emacs-lisp :tangle no :noweb-ref AGENDA_PREFIX
  (agenda . " %i %-20:(+org-entry-category)%?-12t% s")
  (todo   . " %i %-20:(+org-entry-category)")
  (tags   . " %i %-20:(+org-entry-category)")
  (search . " %i %-20:(+org-entry-category)")
#+end_src

Some helper code. If the CATEGORY property is not set, use the file name (but stripped away Roam's prefix).
#+begin_src emacs-lisp
  (defun +org-entry-category ()
    "Get catgory of item at point. Supports org-roam filenames by chopping prefix cookie"
    (+string-chop-prefix-regexp
     "^[0-9]+\\-"
     (or (org-entry-get nil "CATEGORY")
         (if buffer-name
             (file-name-sans-extension
              (file-name-nondirectory buffer-file-name))
           ""))))

  ;; requires s.el
  (defun +string-chop-prefix-regexp (prefix s)
    "Remove PREFIX regexp if it at the start of s"
    (s-chop-prefix (car (s-match prefix s)) s))
#+end_src
** Daily notes
#+begin_src emacs-lisp
(setq org-roam-dailies-directory "daily/")
#+end_src
** Roam capture templates
To add an org-roam file, I begin with `org-roam-capture`. We have to define a couple of template.

#+begin_src emacs-lisp :noweb yes
  (setq org-roam-capture-templates
     '(
          <<ORG_ROAM_CAPTURE>>
       )
   )
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref ORG_ROAM_CAPTURE
  ("d" "default" plain (function org-roam--capture-get-point)
      "%?"
     :file-name "%<%Y%m%d%H%M%S>-${slug}"
     :head "#+title: ${title}\n#+roam_alias:\n#+roam_tags:\n- tags ::\n"
     :unnarrowed t
  )
#+end_src 
** Roam daily templates
For org-roam daily entries, we need some templates.

#+begin_src emacs-lisp :noweb yes
  (setq org-roam-dailies-capture-templates
      '(
          <<ORG_ROAM_DAILY_CAPTURE>>
      )
  )      
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref ORG_ROAM_DAILY_CAPTURE
  ("d" "default" entry
       #'org-roam-capture--get-point
       "* %?"
       :file-name "daily/%<%Y-%m-%d>"
       :head "#+title: Journal %<%Y-%m-%d>\n\n")
#+end_src
* Programming: Python

I tried [[https://elpy.readthedocs.io/en/latest/][elpy]] and [[https://melpa.org/#/anaconda-mode][annaconda-mode]], but couldn't get them to work. [[http://tkf.github.io/emacs-jedi/latest/][jedi]] seems to do what I need to do.

Jedi doesn't work without `virtualenv`. I installed it, although I am already using conda. This might create problems in the future. I will investigate further.

I installed jedi manually. Following the instruction, I did:
#+begin_src sh
  M-x package-install RET company-jedi
  M-x jedi:install-server
#+end_src

#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:complete-on-dot t)
#+end_src

Roam is a minor mode. It's turned on after loading a .org file, but it's not turned off afterwards. This is a hack to turn it off, if I load a python file. There must be better ways to do this.
#+begin_src emacs-lisp
(add-hook 'python-mode-hook (lambda () (org-roam-mode -1)))
#+end_src

* Programming: misc
** Git integration with [[https://magit.vc][Magit]]
  #+begin_src emacs-lisp
  (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))
  #+end_src

** imenu for jumping to definition
  #+begin_src emacs-lisp
  (global-set-key (kbd "M-i") 'imenu)
  #+end_src 

** code snippets using [[https://github.com/joaotavora/yasnippet][yasnippet]]
  #+begin_src emacs-lisp
  (use-package yasnippet
      :ensure t
      :init (yas-global-mode 1)
      :config
          (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
  #+end_src

** Docker
The [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]] makes it easier to program containers.
#+begin_src emacs-lisp
(use-package dockerfile-mode
 :ensure t)
#+end_src
** Go
#+begin_src emacs-lisp
(use-package go-mode
 :ensure t)
#+end_src
* Shell commands, client/server
** Shell commands for running emacs without the daemon
I used the shell command =emacs= to evoke the non-client/server emacs in GUI mode. Similarly, =emacsnw= runs emacs in the terminal. These two commands are defined in =.zshrc=.

#+begin_src sh
function emacs() { /Applications/Emacs.app/Contents/MacOS/Emacs $@ &; }
alias emacsnw="/Applications/Emacs.app/Contents/MacOS/Emacs -nw"
#+end_src

I decided to use the terminal mode emacs for the unix setting for visual editors (defined in =.zshenv=). It seems to be fine.

#+begin_src sh
export VISUAL="/Applications/Emacs/Contents/MacOS/Emacs -nw"
export EDITOR="/Applications/Emacs/Contents/MacOS/Emacs -nw"
#+end_src

** Automatically start the emacs daemon at log in
According to [[http://www.rockhoppertech.com/blog/emacs-daemon-on-macos/][this article]], we can automatically start the emacs daemon by creating a =gnu.emacs.daemon.plist= file under =~/Library/LaunchAgents/= (This file can be extracted from this document using =M-x org-babel-tangle=).

Note: Starting the emacs daemon this way seems to create problems from time to time. I decided not to do it.

#+begin_src xml :tangle gnu.emacs.daemon.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
"http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>gnu.emacs.daemon</string>
  <key>ProgramArguments</key>
  <array>
    <string>/Applications/Emacs.app/Contents/MacOS/Emacs</string>
    <string>--daemon</string>
  </array>
  <key>RunAtLoad</key>
  <true/>
  <key>UserName</key>
  <string>genedelisa</string>
</dict>
#+end_src
** Test if the server is running
To test if the emacs server is running, use the =emacsserver= shell script. If the server is running, it returns the socket filename. 

I put the script under =~/bin=, so make sure that it's in the search path.
#+begin_src sh
export PATH=$HOME/bin:$PATH
#+end_src

Here is the shell script:
#+begin_src sh :tangle emacsserver
lsof -c Emacs | grep server | tr -s " " | cut -d' ' -f8
#+end_src

[[https://en.wikipedia.org/wiki/Lsof][lsof]] is the unix command that lists all the files opened by a process.
** =ec= shell script: run =emacsclient= in GUI mode

The concept came from [[http://mjwall.com/blog/2013/10/04/how-i-use-emacs/][this article]], but I couldn't get it to work on macOS so I had to make some changes.

#+begin_src sh :tangle ec
#!/bin/zsh

socket_file=$(~/bin/emacsserver)
emacs=/Applications/Emacs.app/Contents/MacOS/Emacs
emacsclient=/Applications/Emacs.app/Contents/MacOS/bin/emacsclient

visible_frames() {
  $emacsclient -s $socket_file -e '(length (visible-frame-list))'
}

# I don't actually use this function, but might be useful in some situation
change_focus() {
  $emacsclient -n -s $socket_file -e "(select-frame-set-input-focus (selected-frame))" > /dev/null
}

if [[ $socket_file == "" ]]; then
    echo "starting Emacs server..."
    # I am not sure why I need --chdir $PWD for emacs to load the file from the working directory. But if I didn't add it, emacs starts with $HOME
    $emacs --chdir $PWD --execute "(server-start)" $@ &
else
    $emacsclient -n $@ --socket-name $socket_file
fi
#+end_src
* Interactive functions for personal use
  #+begin_src emacs-lisp
    (defun hhyu-init ()
        (interactive)
        (find-file "~/.emacs.d/config.org"))
    (defun hhyu-cheatsheet ()
        (interactive)
        (dired "~/.emacs.d/notes"))
    (defun hhyu-wide ()
        (interactive)
        (set-frame-width (selected-frame) 200))
    (defun emacs-cheatshee ()
      (interactive)
      (find-file "~/.emacs.d/notes/emacs_notes.org"))
  
  #+end_src

* References
- [[https://github.com/dileban/.emacs.d][Dileban's config]]
- [[https://github.com/alhassy/emacs.d][Al-hassy's book-length config file]]


