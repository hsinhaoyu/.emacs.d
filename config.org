#+TITLE: Hsin-Hao's Emacs configuration
#+AUTHOR: Hsin-Hao Yu
#+STARTUP: overview

This is my Emacs configuration file, in literate programming style (based on [[https://blog.thomasheartman.com/posts/configuring-emacs-with-org-mode-and-literate-programming][this tutorial]]).

* Package management
** Use [[https://melpa.org/#/][MELPA]] for package archive

#+begin_src emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))
#+end_src

** Make sure that ~use-package~ is loaded

#+begin_src emacs-lisp
(when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src
    
* Basic UX settings
** Move custom files outside ~init.el~
Move all ~custom-*~ stuff into ~custom-file.el~. Do not put them in ~init.el~.

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom-file.el")
(load-file custom-file)
#+end_src
** Debugging
#+begin_src emacs-lisp
;;(toggle-debug-on-error)
#+end_src
** General settings
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq column-number-mode t)
#+end_src
** Theme
#+begin_src emacs-lisp
  ;;(use-package monokai-theme
  ;;    :ensure t)
  ;;(load-theme 'monokai t)
  ;;(load-theme 'one-light t)

  ;; use variable-pitch fonts for some headings and titles
  (setq zenburn-use-variable-pitch t)

  ;; scale headings in org-mode
  (setq zenburn-scale-org-headlines t)
  (use-package zenburn-theme :ensure t)
  (load-theme 'zenburn t)
  ;;(load-theme 'tango-dark)
#+end_src
** Enhance M-x with [[https://github.com/nonsequitur/smex][smex]]
  #+begin_src emacs-lisp
  (use-package smex
      :ensure t
      :disabled t
      :config
          (setq smex-save-file (concat user-emacs-directory ".smex-items"))
	  (smex initialize)
      :bind 
          ("M-x" . smex))
  #+end_src
** [[https://company-mode.github.io][company]] mode for completion
  #+begin_src emacs-lisp
    (use-package company
        :ensure t
        :config
            (setq company-idle-delay 0.25)
            (setq completion-ignore-case t)
            (global-company-mode t))
  #+end_src
** Text wrapping
Turn on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][visual-line-mode]] for text and org files. This wraps words by word boundaries.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'visual-line-mode)
(add-hook 'org-mode 'visual-line-mode)
#+end_src
** GUI
Turn off the tool bar and scroll bar in windows. Note: I decided to keep the scroll bar, just to make the margin of the window more visible.
#+begin_src emacs-lisp
(tool-bar-mode -1)
(toggle-scroll-bar -1)
#+end_src
** A more elegant modeline: doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
  (setq doom-modeline-icon nil)
#+end_src
** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :config
        (setq which-key-idle-delay 1))
#+end_src
** Undo tree
Organize undo as a tree. The most useful command is =undo-tree-visualize=.
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
     (global-undo-tree-mode))
#+end_src
** Unix setting
In =.zshrc=, remember to export three environment variables
#+begin_src sh
export DEFT_PATH='/Users/hhyu/Documents/emacs_docs/deft_docs'
export ORG_AGENDA_PATH='/Users/hhyu/Documents/emacs_docs/deft_docs'
#+end_src
** [[https://github.com/kickingvegas/casual-bookmarks][Causal Bookmarks]] - user-friendly bookmarks

#+begin_src emacs-lisp
(use-package bookmark
  :ensure nil
  :defer t)
(use-package casual-bookmarks
  :ensure t
  :bind (:map bookmark-bmenu-mode-map
              ("C-o" . casual-bookmarks-tmenu)
              ("S" . casual-bookmarks-sortby-tmenu)
              ("J" . bookmark-jump))
  :after (bookmark))
#+end_src

Add a menu item for easy access.
#+begin_src emacs-lisp
(require 'casual-bookmarks)
(easy-menu-add-item global-map '(menu-bar)
                    casual-bookmarks-main-menu
                    "Tools")
#+end_src

** [[https://github.com/kickingvegas/casual-dired][Casual Dired]] - user-friendly Dired
Invoke =M-x= dired to launch =Dired=, then =C-o=.

#+begin_src emacs-lisp
(use-package casual-dired
  :ensure t
  :bind (:map dired-mode-map
              ("C-o" . #'casual-dired-tmenu)
              ("s" . #'casual-dired-sort-by-tmenu)
              ("/" . #'casual-dired-search-replace-tmenu)))
#+end_src
** [[https://github.com/kickingvegas/casual-avy][Casual Avy]] - User-friendly Avy
Quickly move to any where in the visible area by searching. 
#+begin_src emacs-lisp
(use-package casual-avy
  :ensure t
  :bind ("M-g" . casual-avy-tmenu))
#+end_src
** Experimental
This is supposed to be useful for accessing environment variables on macOS. Disabled because I haven't found it useful yet.
#+BEGIN_SRC
(use-package exec-path-from-shell
  :ensure t
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+END_SRC
* eLisp programming support
Load packages to make Emacs programming easier.

[[https://github.com/magnars/s.el][s.el]] is a library for string manipulation:
#+begin_src emacs-lisp
(use-package s :ensure t)
#+end_src
* Scratch buffer
The scratch buffer is a convenient place to display cheat sheets.
#+begin_src emacs-lisp
(setq initial-scratch-message 
  (concat
     "* Scratch Buffer *"
     "\n# Evaluate S-expression: C-x C-e or C-j"
     (format "\n# DEFT_PATH=%s" (getenv "DEFT_PATH"))
     (format "\n# ORG_AGENDA_PATH=%s"  (getenv "ORG_AGENDA_PATH"))
  ))
#+end_src 
* Markdown mode
Use [[https://jblevins.org/projects/markdown-mode/][Markdown mode]] for ~.md~ files. A ~marked~ script has to be created, so that markdown files can be viewed with Marked 2 on macOS (see [[https://leanpub.com/markdown-mode/read][this document]]).

  #+begin_src emacs-lisp
  (use-package markdown-mode
      :ensure t
      :commands (markdown-mode gfm-mode)
      :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
      :init (setq markdown-command "multimarkdown")
      :config (setq markdown-open-command "/usr/local/bin/mark")
      :hook ((markdown-mode . flyspell-mode)
             (gfm-mode . flyspell-mode)))
  #+end_src
* Completion and navigation: based on the Consult ecosystem
** Vertico - Completion and selection

I use it to replace =Ivy=. Efficient for selecting an item from many.

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )
#+end_src

** Marginalia: annotation for Vertico
[[https://github.com/minad/marginalia/][Mrginalia]] provides additional information in minibuffers (primarily to support Vertico).

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be actived in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

** Consult - Completion and navigation
[[https://github.com/minad/consult][Cosult]] is similar to Ivy's =counsel=, but =Consult='s preview function is very compelling. See [[https://www.reddit.com/r/emacs/comments/qfrxgb/comment/hi6mfh7/?context=1][this page]] for more info about the relationship between Consult and Ivy. Note that it's not useful without Vertico.

Useful commands:
- =consult-line=: Quickly filter lines containing texts in a buffer (somewhat similar to Ivy's =Swiper= but not quite)

#+begin_src emacs-lisp
  (use-package consult
    :bind (
           ("C-x b" . consult-buffer)    ;; orig. switch-to-buffer
           )
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init
  )
#+end_src
** Orderless - for search
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
* Dired customization
Reference: [[http://ergoemacs.org/emacs/emacs_dired_tips.html][Xah Lee's page]]

Hide ownership details:
#+begin_src emacs-lisp
  (defun xah-dired-mode-setup ()
    "to be run as hook for `dired-mode'."
    (dired-hide-details-mode 1))

  (add-hook 'dired-mode-hook 'xah-dired-mode-setup)
#+end_src

Use the same buffer for viewing directory:
#+begin_src emacs-lisp
;;  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
;;
;;  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory
#+end_src

* Deft: For searching documents

[[https://github.com/jrblevin/deft][Deft mode]] is a tool for managing notes, similar to Notational Velocity on macOS.

Note that I am planning to replace it with =consult=.

** Basic setup

- I don't want Deft to display the filename as the title of a document, so I set deft-use-filename-as-title to nil

#+begin_src emacs-lisp
    ;; if DEFT_PATH is not defined, use a default path
    (defun get_deft_path ()
      (let ((deft_path (getenv "DEFT_PATH")))
        (if deft_path deft_path "~/.deft")))

    (use-package deft
        :ensure t
        :after org
        :bind (("<f8>" . deft))
        :commands (deft)
        :config
        (setq deft-extensions '("txt" "tex" "md" "org")
              deft-directory (get_deft_path)
              deft-default-extension "org"
              deft-recursive t
              deft-use-filter-string-for-filename t
              deft-use-filename-as-title nil
              deft-markdown-mode-title-level 1
              deft-file-naming-rules '((noslash . "-")
                                       (nospace . "-")
                                       (case-fn . downcase))))
#+end_src
** Customized title (for Org-Roam)
For the title, Filter out the :PROPERTY:....:END: block introduced by Org-Roam V2.

#+begin_src emacs-lisp
  (defun hhyu/deft-title-preprocess (orig-func &rest args)
    (let* ((file (car args))
           (contents (cadr args))
           (m (string-match ":PROPERTIES:\n\\(.+\n\\)+:END:\n" contents)))
      (if m
          (let ((new-contents
                 (substring contents
                            (match-end 0)
                            (length contents))))
               (funcall orig-func file new-contents))
          (funcall orig-func file contents))))

  (advice-add 'deft-parse-title :around #'hhyu/deft-title-preprocess)
#+end_src

** Customized summary (for Org-Roam)
Filter out headers of org files in Deft's summary display.
The filter patterns RX1, RX2, RX3... are defined in the Org-roam/Deft support section.

The second pattern removes "* " at the beginning of a line

#+begin_src emacs-lisp :noweb yes
  (setq deft-strip-summary-regexp "\\([]\\|^\\*+[[:blank:]]\\|<<RX1>>\\|<<RX2>>\\|<<RX3>>\\|<<RX4>>\\)")
#+end_src
* Org mode
I use Org mode for my todos, note taking, and journaling.

I used to use "org journal" for journal keeping, but I have since replaced it with org-roam's dailies. So I have removed the org-journal section.

I have also removed the section on capture templates. This is because I use org-roam for capruring.

** Basics UX

Some basic UX settings
  #+begin_src emacs-lisp
    ;; spellcheck all org documents
    (add-hook 'org-mode-hook 'flyspell-mode)

    (add-hook 'org-mode-hook
      (lambda ()
          (define-key org-mode-map (kbd "C-c a") 'org-agenda)
          (define-key org-mode-map (kbd "C-c l") 'org-store-link)))

    ;; used identation to indicate the hierarchy of headings, rather than stars
    (setq org-startup-indented t)

    ;; wrap around
    (setq org-startup-truncated nil)
  #+end_src

Use bullets rather than stars
  #+begin_src emacs-lisp
  (use-package org-bullets
      :ensure t
      :init
          (setq org-bullets-bullet-list'("◉" "●" "○" "▪" "▪"))
      :config
          (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
          (setq org-ellipsis " ▾"))
  #+end_src

Display timestamps in 12 hour format. This changes how timestamps are displayed, but not how agenda time grid is displayed. For more information, see [[https://emacs.stackexchange.com/questions/19863/how-to-set-my-own-date-format-for-org][this link]].
  #+begin_src emacs-lisp
  ;; %l is hours in 12 clock
  ;; %p is AM/PM
  (setq-default org-display-custom-times t)
  (setq org-time-stamp-custom-formats '("<%a %b %e %Y>" . "<%a %b %e %Y %l:%M%p>"))
  #+end_src

Create some margin space (I got this from System Crafters youtube channel)
#+begin_src emacs-lisp
  ;;(defun hhyu/org-mode-visual-fill ()
  ;;  (setq visual-fill-column-wide 50
  ;;        visual-fill-column-center-text t)
  ;;  (visual-fill-column-mode 1))

  ;;(use-package visual-fill-column
  ;;  :ensure t
  ;;  :hook (org-mode . hhyu/org-mode-visual-fill))
#+end_src
  
** Code blocks
By default, only lisp code blocks can be evaluated. Other languages have to be enabled.
[[https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks/][This]] is a useful tutorial about org-mode code blocks.
#+begin_src emacs-lisp
  ;; Do not ask for confirmation when evaluation a block
  (setq org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (lisp . t)
     (shell . t)
     (sed . t)
     (awk . t)
     (python . t)
     (R . t)
     (sqlite . t)
     (lilypond . t)
     (scheme . t)
     ))
#+end_src


Added this =org-babel-tangle-append= command, so that tangling appends to existing files (from [[https://emacs.stackexchange.com/questions/28098/how-to-change-org-mode-babel-tangle-write-to-file-way-as-append-instead-of-overr][this post]]).
#+begin_src emacs-lisp
  (defun org-babel-tangle-append ()
    "Append source code block at point to its tangle file.
  The command works like `org-babel-tangle' with prefix arg
  but `delete-file' is ignored."
    (interactive)
    (cl-letf (((symbol-function 'delete-file) #'ignore))
      (org-babel-tangle)))

  (defun org-babel-tangle-append-setup ()
    "Add key-binding C-c C-v C-t for `org-babel-tangle-append'."
    (org-defkey org-mode-map (kbd "C-c C-v +") 'org-babel-tangle-append))

  (add-hook 'org-mode-hook #'org-babel-tangle-append-setup)
#+end_src
** Workflow
Integration with deft: Use everything under deft to build agenda.
Since I save all Roam dailies under the /daily directory under the deft directory, I also included that directory.
I thought that org-agenda-files is by default recursive, but if I didn't include the daily subdirectory, agenda doesn't see TODO's in dailies.
  #+begin_src emacs-lisp
    ;; if ORG_PATH is not defined, use the default DEFT path
    (defun get_agenda_path ()
      (let ((org_agenda_path (getenv "ORG_AGENDA_PATH")))
        (if org_agenda_path org_agenda_path "~/.deft")))

    ;;(setq org-agenda-files '("~/.deft"))
    (setq org-agenda-files
          (list (get_agenda_path)
                (concat (get_agenda_path) "/daily")))
      
  #+end_src

This defines my todo workflow
  #+begin_src emacs-lisp
  (setq org-todo-keywords
      '((sequence "NEXT(n)" "TODO(t)" "WAITING(w)" "SOMEDAY(s)" "PROJ(p)" "|" "DONE(d)" "CANCELED(c)")))
  #+end_src
** Agenda UX

  #+begin_src emacs-lisp
  ;; use 12 hour clock in timegrid
  (setq org-agenda-timegrid-use-ampm 1)

  ;; time grid takes too much space
  (setq org-agenda-use-time-grid nil)
  #+end_src

  The `org-agenda-prefix-format` variable is a way to customize how agenda is displayed. Use `C-h v` to see the template syntax. Here, I set up a noweb macro so other parts of this config file can change it.

#+begin_src emacs-lisp :noweb yes
  (setq org-agenda-prefix-format
        '(
          <<AGENDA_PREFIX>>
          )
  )
#+end_src

** Customized agenda commands

Set up some customized commands
#+begin_src emacs-lisp :noweb yes
  (setq org-agenda-custom-commands
        '(
          <<ORG_AGENDA>>
          )
  )
	
#+end_src

This one is complicated. It is based on [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][this article]].

First define some helper functions
  #+begin_src emacs-lisp
    (defun air-org-skip-subtree-if-priority (priority)
        "Skip an agenda subtree if it has a priority of PRIORITY.
         PRIORITY may be one of the characters ?A, ?B, or ?C."
        (let ((subtree-end (save-excursion (org-end-of-subtree t)))
              (pri-value (* 1000 (- org-lowest-priority priority)))
              (pri-current (org-get-priority (thing-at-point 'line t))))
             (if (= pri-value pri-current)
                 subtree-end
                 nil)))

    (defun air-org-skip-subtree-if-habit ()
        "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
             (if (string= (org-entry-get nil "STYLE") "habit")
                 subtree-end
             nil)))
  #+end_src

Then, define the template:
#+begin_src emacs-lisp :tangle no :noweb-ref ORG_AGENDA
  ("d" "Daily agenda and all TODOs"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))

          (agenda "")

          (alltodo ""
                   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                   (air-org-skip-subtree-if-priority ?A)
                                                   (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks nil))
   )
#+end_src

I plan to set up a second command. TODO

** Preview
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)

  ;; see https://github.com/gongzhitaao/orgcss
  (setq org-html-htmlize-output-type 'css)
#+end_src
* Org-Roam
I use [[https://www.orgroam.com][org-roam]] to keep track of org files that are connected to each other. It is inspired by the cloud-based commercial product [[https://roamresearch.com][Roam]]. 
** Basic setup
I took this from [[https://github.com/org-roam/org-roam][org-roam's GitHub README]].
About completion, see this [[https://org-roam.discourse.group/t/how-to-to-get-title-of-the-target-note-working-with-inline-autocomplete-in-org-roam/782][discussion]].

Note that I use the deft directory for Roam.

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t

    :init
    (setq org-roam-v2-ack t)

    :custom
    (org-roam-directory (get_deft_path))
    (org-roam-completion-everywhere t)

    :config
    (org-roam-db-autosync-mode)

    :bind (("C-c r c" . org-roam-capture)
           ("C-c r f" . consult-org-roam-file-find)
           ("C-c r s" . consult-org-roam-search)
           ("C-c r i" . org-roam-node-insert)
           ("C-c r l" . org-roam-buffer-toggle)
           ("C-c r j" . org-roam-dailies-capture-today)
           ("<f9>"    . org-roam-dailies-capture-today)
           ("C-c r d" . org-roam-dailies-goto-today)
           :map org-mode-map
           ("C-M-i"   . completion-at-point)
           ("C-c r a" . org-roam-alias-add)
          )
  )
#+end_src
** Configure the org-roam buffer display
Configure the behavior of the org-roam buffer. I took this code directly from org-roam's [[https://www.orgroam.com/manual.html#Configuring-the-Org_002droam-buffer-display][manual]].
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))
#+end_src
** Interaction with org-agenda
I use the setup recommended in [[https://d12frosted.io/posts/2020-06-24-task-management-with-roam-vol2.html][this article]], to simplify how TODOs are displayed in org-agenda. To make it work, set the category of a heading with

Here, we set up templates controlling how items are displayed in agenda. Note that AGENDA_PREFIX is a macro defined earlier.
#+begin_src emacs-lisp :tangle no :noweb-ref AGENDA_PREFIX
  (agenda . " %i %-20:(+org-entry-category)%?-12t% s")
  (todo   . " %i %-20:(+org-entry-category)")
  (tags   . " %i %-20:(+org-entry-category)")
  (search . " %i %-20:(+org-entry-category)")
#+end_src

Some helper code. If the CATEGORY property is not set, use the file name (but stripped away Roam's prefix).
#+begin_src emacs-lisp
  (defun +org-entry-category ()
    "Get catgory of item at point. Supports org-roam filenames by chopping prefix cookie"
    (+string-chop-prefix-regexp
     "^[0-9]+\\-"
     (or (org-entry-get nil "CATEGORY")
         (if buffer-name
             (file-name-sans-extension
              (file-name-nondirectory buffer-file-name))
           ""))))

  ;; requires s.el
  (defun +string-chop-prefix-regexp (prefix s)
    "Remove PREFIX regexp if it at the start of s"
    (s-chop-prefix (car (s-match prefix s)) s))
#+end_src
** Roam capture templates
To add an org-roam file, I begin with `org-roam-capture`. We have to define a couple of template. Note that I used no-web (emacs' literate programming tool) to divide the templates into manageable chunks.

Notes about Org-Roam V2:
- "#+roam_tags" is gone. I never used it anyway
- "#+roam_alias" is gone. Replaced by the "roam_aliases" property. Press "C-c r a" to insert a new alias

I think I have disabled it by setting noweb to no
#+begin_comment
#+begin_src emacs-lisp :noweb no
  (setq org-roam-capture-templates
     '(
          <<ORG_ROAM_CAPTURE>>
       )
   )
#+end_src
#+end_comment

The default template:
#+begin_src emacs-lisp :tangle no :noweb-ref ORG_ROAM_CAPTURE
  ("d" "default" plain
   "%?"
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                       "#+title: ${title}\ntags ::\n")
   :unnarrowed t)
#+end_src

Notes from classes:
#+begin_src emacs-lisp :tangle no :noweb-ref ORG_ROAM_CAPTURE
  ("c" "class notes" plain
   "%?"
   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}"
                      "#+title: Class Notes: ${title}\nntags :: [[roam:education]]\n")
   :unnarrowed t
  )
#+end_src
** Deft support
Here we define some patterns that should be stripped away in Deft's display. 

By default, the summary of each file ignores uppercase markups such as `#+AUTHOR:`. I want it to ignore lowercase ones too.
This matches things like #+title: or #+TITLE:
  #+begin_src emacs-lisp :tangle no :noweb-ref RX1
  ^#\\+[[:alpha:]_]+:.*$
  #+end_src

  This matches my convention "- tags ::". 
  #+begin_src emacs-lisp :tangle no :noweb-ref RX2
  ^- tags ::.*$
  #+end_src

  In addition to "- tags ::", I also use "tags ::"
  #+begin_src emacs-lisp :tangle no :noweb-ref RX3
  ^tags ::.*$
  #+end_src

  #+begin_src emacs-lisp :tangle no :noweb-ref RX4
    :PROPERTIES:\n\\(.+\n\\)+:END:\n
  #+end_src
** Roam dailies

Set up the location of the dailies.
#+begin_src emacs-lisp
(setq org-roam-dailies-directory "daily/")
#+end_src


For org-roam daily entries, we eneed some templates.
#+begin_src emacs-lisp :noweb yes
  (setq org-roam-dailies-capture-templates
      '(
          <<ORG_ROAM_DAILY_CAPTURE>>
      )
  )      
#+end_src

#+begin_src emacs-lisp :tangle no :noweb-ref ORG_ROAM_DAILY_CAPTURE
  ("d" "default" entry
       "*** %(format-time-string \"%H:%M\") %?"
       :if-new (file+head
                "%<%Y-%m-%d>.org"
                "#+title: Journal %<%Y-%m-%d>\n")
  )
#+end_src

#+begin_comment
#+begin_src emacs-lisp :tangle no :noweb-ref ORG_ROAM_DAILY_CAPTURE
  ("m" "meeting" entry
       "*** %(format-time-string \"%H:%M\") %? [[roam:meeting]]\n"
       :if-new (file+head
                "%<%Y-%m-%d>.org"
                "#+title: Journal %<%Y-%m-%d>\n")
  )
#+end_src
#+end_comment
** consult-org-roam
[[https://github.com/jgru/consult-org-roam][consult-org-roam]] makes it possible to search org-roam files with previews.

#+begin_src emacs-lisp
  (use-package consult-org-roam
     :ensure t
     :after org-roam
     :init
     (require 'consult-org-roam)
     ;; Activate the minor mode
     (consult-org-roam-mode 1)
     :custom
     ;; Use `ripgrep' for searching with `consult-org-roam-search'
     (consult-org-roam-grep-func #'consult-ripgrep)
     ;; Configure a custom narrow key for `consult-buffer'
     (consult-org-roam-buffer-narrow-key ?r)
     ;; Display org-roam buffers right after non-org-roam buffers
     ;; in consult-buffer (and not down at the bottom)
     (consult-org-roam-buffer-after-buffers t)
     :config
     ;; Eventually suppress previewing for certain functions
     (consult-customize
      consult-org-roam-forward-links
      :preview-key (kbd "M-."))
     :bind
     ;; Define some convenient keybindings as an addition
     ("C-c n e" . consult-org-roam-file-find)
     ("C-c n b" . consult-org-roam-backlinks)
     ("C-c n l" . consult-org-roam-forward-links)
     ("C-c n r" . consult-org-roam-search))
#+end_src
* Writing

Use [[https://github.com/PillFall/languagetool.el][languagetool]] to check grammar. Currently, to check grammar, =M-x languagetool-check=

#+begin_src emacs-lisp
(use-package languagetool
  :ensure t
  :defer t
  :commands (languagetool-check
             languagetool-clear-suggestions
             languagetool-correct-at-point
             languagetool-correct-buffer
             languagetool-set-language
             languagetool-server-mode
             languagetool-server-start
             languagetool-server-stop)
  :config
  (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8")
        languagetool-console-command "~/bin/langtool/LanguageTool-6.5/languagetool-commandline.jar"
        languagetool-server-command "~/bin/langtool/LanguageTool-6.5/languagetool-server.jar"))
#+end_src
* Music (lilypond)
Lilypond comes with a lilypond-mode, but I have to add it to the load path myself. I took the instructions from http://www.danielhensel.de/www.danielhensel.de_en/styled-19/styled-22/styled-23/
#+begin_src emacs-lisp
  (setq load-path (append (list "/opt/homebrew/Cellar/lilypond/2.24.1/share/emacs/site-lisp/lilypond") load-path))
  (autoload 'LilyPond-mode "lilypond-mode" "LilyPond Editing Mode" t)
  (add-to-list 'auto-mode-alist '("\\.ly$" . LilyPond-mode))
  (add-to-list 'auto-mode-alist '("\\.ily$" . LilyPond-mode))
  (add-to-list 'auto-mode-alist '("\\.lytex$" . LilyPond-mode))
  (add-hook 'LilyPond-mode-hook (lambda () (turn-on-font-lock)))
#+end_src
* Project management: Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config (projectile-mode)
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
        (setq projectile-switch-project-action #'projectile-dired))

#+end_src
* Programming: Python
I am using Emacs' built-in language client (=eglot=). 
I am using Microsoft =pyright= for the language server. To install, =pip install pyright=.

Automatically turn on =eglot=
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'python-ts-mode-hook 'eglot-ensure)
#+end_src

* Programming: R
This [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-R.html][document]] explains how to use R code blocks. The ESS (Emacs Speaks Statistics) package is needed.

Disabled because it seems to conflict with LSP
+begin_src emacs-lisp
  (use-package ess
    :ensure t
    :init (require 'ess-site))
#+end_src
* Programming: Misc
** Spell-check code comments on the fly
#+begin_src emacs-lisp
  (dolist (hook '(common-lisp-lisp-mode-hook
                  emacs-lisp-mode-hook
                  python-mode-hook
                  shell-mode-hook
                  LaTeX-mode-hook))
    (add-hook hook 'flyspell-prog-mode))
#+end_src
** Git integration with [[https://magit.vc][Magit]]
  #+begin_src emacs-lisp
  (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))
  #+end_src

** imenu for jumping to definition
  #+begin_src emacs-lisp
  (global-set-key (kbd "M-i") 'imenu)
  #+end_src 
** code snippets using [[https://github.com/joaotavora/yasnippet][yasnippet]]
  #+begin_src emacs-lisp
  (use-package yasnippet
      :ensure t
      :init (yas-global-mode 1)
      :config
          (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
  #+end_src

** Docker
The [[https://github.com/spotify/dockerfile-mode][dockerfile-mode]] makes it easier to program containers.
#+begin_src emacs-lisp
(use-package dockerfile-mode
 :ensure t)
#+end_src
** =dumb-jump= for locating function definitions
The "Mastering Emacs" book recommends the [[https://github.com/jacktasia/dumb-jump][dumb-jump]] package for locating programming symbols.  [[https://susam.net/cc/mastering-emacs/ch06.html#xref][This page]] has more info.

The package's README recommends installing [[https://github.com/ggreer/the_silver_searcher#installing][ag]]. I installed it with homebrew. 

#+begin_src emacs-lisp
  (use-package dumb-jump
    :ensure t)

  ;; Enable the xref backend. 
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+end_src
* Programming: Go
#+begin_src emacs-lisp
(use-package go-mode
 :ensure t)
#+end_src
* Programming: Common LISP
For editing Common LISP code with the SLIME mode (ref: https://lisp-lang.org/learn/getting-started/)
#+begin_src emacs-lisp
(load (expand-file-name "~/quicklisp/slime-helper.el"))
(setq inferior-lisp-program "/opt/homebrew/bin/sbcl")
#+end_src
* Shell commands, client/server
** Shell commands for running emacs without the daemon
I used the shell command =emacs= to evoke the non-client/server emacs in GUI mode. Similarly, =emacsnw= runs emacs in the terminal. These two commands are defined in =.zshrc=.

#+begin_src sh
function emacs() { /Applications/Emacs.app/Contents/MacOS/Emacs $@ &; }
alias emacsnw="/Applications/Emacs.app/Contents/MacOS/Emacs -nw"
#+end_src

I decided to use the terminal mode emacs for the unix setting for visual editors (defined in =.zshenv=). It seems to be fine.

#+begin_src sh
export VISUAL="/Applications/Emacs/Contents/MacOS/Emacs -nw"
export EDITOR="/Applications/Emacs/Contents/MacOS/Emacs -nw"
#+end_src

** Automatically start the emacs daemon at log in
According to [[http://www.rockhoppertech.com/blog/emacs-daemon-on-macos/][this article]], we can automatically start the emacs daemon by creating a =gnu.emacs.daemon.plist= file under =~/Library/LaunchAgents/= (This file can be extracted from this document using =M-x org-babel-tangle=).

Note: Starting the emacs daemon this way seems to create problems from time to time. I decided not to do it.

#+begin_src xml :tangle gnu.emacs.daemon.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
"http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>gnu.emacs.daemon</string>
  <key>ProgramArguments</key>
  <array>
    <string>/Applications/Emacs.app/Contents/MacOS/Emacs</string>
    <string>--daemon</string>
  </array>
  <key>RunAtLoad</key>
  <true/>
  <key>UserName</key>
  <string>genedelisa</string>
</dict>
#+end_src
** Test if the server is running
To test if the emacs server is running, use the =emacsserver= shell script. If the server is running, it returns the socket filename. 

I put the script under =~/bin=, so make sure that it's in the search path.
#+begin_src sh
export PATH=$HOME/bin:$PATH
#+end_src

Here is the shell script:
#+begin_src sh :tangle emacsserver
lsof -c Emacs | grep server | tr -s " " | cut -d' ' -f8
#+end_src

[[https://en.wikipedia.org/wiki/Lsof][lsof]] is the unix command that lists all the files opened by a process.
** =ec= shell script: run =emacsclient= in GUI mode

The concept came from [[http://mjwall.com/blog/2013/10/04/how-i-use-emacs/][this article]], but I couldn't get it to work on macOS so I had to make some changes.

#+begin_src sh :tangle ec
#!/bin/zsh

socket_file=$(~/bin/emacsserver)
emacs=/Applications/Emacs.app/Contents/MacOS/Emacs
emacsclient=/Applications/Emacs.app/Contents/MacOS/bin/emacsclient

visible_frames() {
  $emacsclient -s $socket_file -e '(length (visible-frame-list))'
}

# I don't actually use this function, but might be useful in some situation
change_focus() {
  $emacsclient -n -s $socket_file -e "(select-frame-set-input-focus (selected-frame))" > /dev/null
}

if [[ $socket_file == "" ]]; then
    echo "starting Emacs server..."
    # I am not sure why I need --chdir $PWD for emacs to load the file from the working directory. But if I didn't add it, emacs starts with $HOME
    $emacs --chdir $PWD --execute "(progn (server-start) (hhyu-big))" $@ &
else
    $emacsclient -n $@ --socket-name $socket_file
fi
#+end_src
* Interactive functions for personal use
  #+begin_src emacs-lisp
    (defun hhyu-init ()
        (interactive)
        (find-file "~/.emacs.d/config.org"))
    (defun hhyu-cheatsheets ()
        (interactive)
        (dired "~/dev/resources/cheatsheets/"))
    (defun hhyu-tips ()
        (interactive)
        (find-file "~/dev/resources/cheatsheets/emacs_tips.org"))
    (defun hhyu-wide ()
        (interactive)
        (set-frame-width (selected-frame) 200))
    (defun hhyu-big ()
        (interactive)
        (set-frame-width (selected-frame) 180)
        (set-frame-height (selected-frame) 60)
        (my/frame-recenter))
  #+end_src

  Place a frame (i.e. window) to the center of the monitor. Taken from https://christiantietze.de/posts/2022/04/emacs-center-window-current-monitor-simplified/
  #+begin_src emacs-lisp
    (defun my/frame-recenter (&optional frame)
      "Center FRAME on the screen.
    FRAME can be a frame name, a terminal name, or a frame.
    If FRAME is omitted or nil, use currently selected frame."
      (interactive)
      (unless (eq 'maximised (frame-parameter nil 'fullscreen))
        (modify-frame-parameters
         frame '((user-position . t) (top . 0.5) (left . 0.5)))))
  #+end_src

* References
- [[https://github.com/dileban/.emacs.d][Dileban's config]]
- [[https://github.com/alhassy/emacs.d][Al-hassy's book-length config file]]


